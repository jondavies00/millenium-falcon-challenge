# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: cache poetry install
      uses: actions/cache@v2
      with:
        path: ~/.local
        key: poetry-1.1.12-0
    - uses: snok/install-poetry@v1
      with:
        version: 1.1.12
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: cache deps
      id: cache-deps
      uses: actions/cache@v2
      with:
        path: .venv
        key: pydeps-${{ hashFiles('**/poetry.lock') }}
    - run: poetry install --no-interaction --no-root 
      working-directory: ./core
      if: steps.cache-deps.outputs.cache-hit != 'true'
    - run: poetry install --no-interaction
      working-directory: ./core
    - run: poetry run pytest 
      working-directory: ./core
    - name: Lint with pylint
      run: |
        working-directory: ./core
        pylint --output-format=colorized --extension-pkg-whitelist='pydantic' --fail-under=8.0 core/falcon_solver
        pylint --output-format=colorized --fail-under=8.0 cli
